import base64
from datetime import datetime
import bitarray
import struct

data = "AAABACADAEAFAGAHAIAJAKALAMANAOAPAQARASATAUAVAWAXAYAZAaAbAcAdAeAfAgAhAiAjAkAlAmAnAoApAqArAsAtAuAvAwAxAyAzA0A1A2A3A4A5A6A7A8A9A+A/BABBBCBDBEBFBGBHBIBJBKBLBMBNBOBPBQBRBSBTBUBVBWBXBYBZBaBbBcBdBeBfBgBhBiBjBkBlBmBnBoBpBqBrBsBtBuBvBwBxByBzB0B1B2B3B4B5B6B7B8B9B+B/CACBCCCDCECFCGCHCICJCKCLCMCNCOCPCQCRCSCTCUCVCWCXCYCZCaCbCcCdCeCfCgChCiCjCkClCmCnCoCpCqCrCsCtCuCvCwCxCyCzC0C1C2C3C4C5C6C7C8C9C+C/DADBDCDDDEDFDGDHDIDJDKDLDMDNDODPDQDRDSDTDUDVDWDXDYDZDaDbDcDdDeDfDgDhDiDjDkDlDmDnDoDpDqDrDsDtDuDvDwDxDyDzD0D1D2D3D4D5D6D7D8D9D+D/EAEBECEDEEEFEGEHEIEJEKELEMENEOEPEQERESETEUEVEWEXEYEZEaEbEcEdEeEfEgEhEiEjEkElEmEnEoEpEqErEsEtEuEvEwExEyEzE0E1E2E3E4E5E6E7E8E9E+E/FAFBFCFDFEFFFGFHFIFJFKFLFMFNFOFPFQFRFSFTFUFVFWFXFYFZFaFbFcFdFeFfFgFhFiFjFkFlFmFnFoFpFqFrFsFtFuFvFwFxFyFzF0F1F2F3F4F5F6F7F8F9F+F/GAGBGCGDGEGFGGGHGIGJGKGLGMGNGOGP"
data = data.strip()

decoded_bytes = base64.b64decode(data)
print(f"{decoded_bytes=}")
b_array = bitarray.bitarray()
b_array.frombytes(decoded_bytes)

print(f"{b_array=}")
print(f"{len(b_array)=}")

count = 0
signals = []
for i in range(len(b_array)//12):
    start_idx = i * 12
    end_idx = (i+1) * 12
    num = int(b_array[start_idx : end_idx].to01(), 2)
    # print(f"{num=}")
    signals.append(num)
    count += 1

print(f"Signals: {signals}")
print(f"Count: {count}")


# 0, 1, 2, 3, 4, 5, 6, 7 -> Boron

# Decoded base 64 String Python
# 0, 1, 2, 3, 4
# [000000000000] [000000000001] [000000000010] [000000000011] [000000000100] 0000....

# BinarySignal in Boron
# 00000000000000000000000100000000001000000000001101000000 -> raw
# 00000000 00000000 00000001 00000000 00100000 00000011 01000000 -> uint8_t (0, 0, 1, 0, 32, 3, 0, 64)
# 000000000000 000000000001 000000000010 000000000011 01000000.... -> shorts (0, 1, 2, 3, ?) 